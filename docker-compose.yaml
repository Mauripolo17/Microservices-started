services:
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - eureka-network

  service-discovery:
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - eureka-network

  api-gateway:
    container_name: api-gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    depends_on:
      - eureka-server
      - product-service
      - order-service
      - payment-service
      - inventory-service
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8089:8080"
    networks:
        - eureka-network

  order-postgres:
    image: postgres:15-alpine
    container_name: order_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd1
      POSTGRES_DB: orderdb
    ports:
      - "5433:5432"
    volumes:
      - order_pgdata:/var/lib/postgresql/data
    networks:
      - eureka-network


  order-service:
    container_name: order-service
    build:
      context: order
      dockerfile: Dockerfile
    depends_on:
      - order-postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd1
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8085:8085"
    networks:
      - eureka-network

  inventory-postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd2
      POSTGRES_DB: inventorydb
    ports:
      - "5434:5432"
    volumes:
      - inventory_pgdata:/var/lib/postgresql/data
    networks:
      - eureka-network

  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory
      dockerfile: Dockerfile
    depends_on:
      - inventory-postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-postgres:5432/inventorydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd2
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8083:8083"
    networks:
      - eureka-network


  payment-postgres:
    image: postgres:15-alpine
    container_name: payment_postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pwd3
      POSTGRES_DB: paymentdb
    ports:
      - "5435:5432"
    volumes:
      - payment_pgdata:/var/lib/postgresql/data
    networks:
      - eureka-network

  redis:
    image: redis
    container_name: redis
    command: [ "redis-server", "--bind", "0.0.0.0" ]
    ports:
      - "6379:6379"
    networks:
      - eureka-network


  payment-service:
    container_name: payment-service
    build:
      context: ./payment
      dockerfile: Dockerfile
    depends_on:
      - payment-postgres
      - redis
    environment:
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_CACHE_TYPE: redis
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-postgres:5432/paymentdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pwd3
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8084:8084"
    networks:
      - eureka-network
      - loki

  mongo:
    image: mongo:6.0
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - eureka-network

  product-service:
    container_name: product-service
    build:
      context: ./product
      dockerfile: Dockerfile
    depends_on:
      - mongo
    environment:
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_CACHE_TYPE: redis
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/productdb
    ports:
      - "8082:8082"
    networks:
      - eureka-network


  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - loki
      - eureka-network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - eureka-network

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.5
    ports:
      - 9090:8080
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    volumes:
      - keycloak_data:/opt/keycloak/data
    command:
      - 'start-dev'


volumes:
  order_pgdata:
  inventory_pgdata:
  payment_pgdata:
  mongo_data:
  keycloak_data:

networks:
  eureka-network:
    driver: bridge
  loki:
